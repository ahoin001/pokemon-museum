{"version":3,"sources":["components/Pokemon/PokemonCard/PokeCardsStyles.js","components/Pokemon/PokemonCard/PokeCard.js","components/Pokemon/PokemonList/PokemonListStyles.js","components/Pokemon/PokemonList/PokemonList.js","components/Search/SearchStyles.js","components/Search/Search.js","container/App.js","serviceWorker.js","index.js"],"names":["CardContainer","styled","div","props","alternate","PokeCard","p","listLength","css","button","hoverColor","useState","pokemon","setPokemon","useEffect","a","axios","get","name","then","types","data","map","pokemonTypes","type","join","prevState","sprite","sprites","front_default","catch","err","console","log","fetchedPokemon","split","Fragment","toUpperCase","src","alt","PokemonCardsContainer","PokemonList","pokemonCards","pokemonList","key","SearchBar","input","Search","placeholder","onChange","e","App","setPokemonList","searchResult","setsearchResult","pokemonListResponse","results","fetchedPokemonList","filterdPokemonList","length","filter","toLowerCase","includes","className","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1b816623.chunk.js","sourcesContent":["// ? Writing like this allows styled components to be made in an external file and used anywhere imported\nimport styled, { css } from 'styled-components'\n\nexport const CardContainer = styled.div` \n\n  /* display: flex;\n  flex-direction: column; */\n  \n  padding: 1rem;\n  border: 0.7px solid grey;\n  border-radius: 5px;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n  backface-visibility: hidden;\n  text-align: center;\n\n  cursor: pointer;\n  -moz-osx-font-smoothing: grayscale;\n  \n  transform: translateZ(0);\n  transition: transform 0.25s ease-out;\n\n/* '&' is required to let SC know hover belongs to this component */\n&:hover {\n  background-color: ${props => props.alternate ? props.alternate : 'lightgreen'};\n  color: 'black';\n  transform: scale(1.05);\n}\n`;\n\n\n// ? Conditionally render a set of CSS properties  \nexport const ListSubtitle = styled.p` \n${props => props.listLength <= 1 ? css`color: blue; font-weight: bold;` : props.listLength <= 2 ? css`color:blue;` : ''};\n`;\n\nexport const AppContainerButton = styled.button` \n\n`;","import React, { useEffect, useState } from 'react'\nimport axios from \"axios\";\nimport * as Styled from './PokeCardsStyles'\n\nconst PokeCard = (props) => {\n\n    const [pokemon, setPokemon] = useState(null)\n\n    // ? Use Pokemon Name to get Specific details for it\n    useEffect(() => {\n\n        const fetchedPokemon = async () => {\n\n            await axios.get(`http://pokeapi.co/api/v2/pokemon/${props.name}/`)\n                .then((pokemon) => {\n\n                    // console.log(`Response from pokemon card: `, pokemon.data);\n\n                    const types = pokemon.data.types.map(pokemonTypes => pokemonTypes.type.name).join(', ')\n\n                    setPokemon(prevState => ({\n                        ...prevState,\n                        name: pokemon.data.name,\n                        sprite: pokemon.data.sprites.front_default,\n                        types: types\n                    }));\n\n\n                })\n                .catch((err) => {\n                    console.log(`Error in call`, err)\n                }\n                )\n        }\n\n        fetchedPokemon()\n\n    }, [props.name])\n\n    // ? Switch seems more intuitive but if is less lines . \n    let hoverColor;\n\n    if (pokemon) {\n        if (pokemon.types.split(', ')[0] === 'fire') {\n            hoverColor = `rgb(240,128,48)`\n        } else if (pokemon.types.split(', ')[0] === 'flying') {\n            hoverColor = `rgb(164,138,241)`\n        } else if (pokemon.types.split(', ')[0] === 'dark') {\n            hoverColor = `rgb(112,88,72)`\n        } else if (pokemon.types.split(', ')[0] === 'electric') {\n            hoverColor = `rgb(254,211,39)`\n        } else if (pokemon.types.split(', ')[0] === 'ghost') {\n            hoverColor = `rgb(110,85,155)`\n        } else if (pokemon.types.split(', ')[0] === 'bug') {\n            hoverColor = `rgb(168,184,32)`\n        } else if (pokemon.types.split(', ')[0] === 'water') {\n            hoverColor = `rgb(106,145,237)`\n        } else if (pokemon.types.split(', ')[0] === 'fairy') {\n            hoverColor = `rgb(222,165,222)`\n        } else if (pokemon.types.split(', ')[0] === 'normal') {\n            hoverColor = `rgb(162,162,110)`\n        } else if (pokemon.types.split(', ')[0] === 'ground') {\n            hoverColor = `rgb(231,197,103)`\n        } else if (pokemon.types.split(', ')[0] === 'poison') {\n            hoverColor = `rgb(160,38,163)`\n        } else if (pokemon.types.split(', ')[0] === 'fighting') {\n            hoverColor = `rgb(192,48,40)`\n        } else if (pokemon.types.split(', ')[0] === 'psychic') {\n            hoverColor = `rgb(255,84,140)`\n        } else if (pokemon.types.split(', ')[0] === 'dragon') {\n            hoverColor = `rgb(131,83,249)`\n        } else if (pokemon.types.split(', ')[0] === 'rock') {\n            hoverColor = `rgb(183,159,56)`\n        }\n    }\n\n    // if (pokemon) {\n\n    //     switch (pokemon.types.split(', ')[0]) {\n    //         case 'fire':\n    //             hoverColor = `rgb(240,128,48)`\n    //             break;\n\n    //         case 'flying':\n    //             hoverColor = `rgb(164,138,241)`\n    //             break;\n\n    //         case 'dark':\n    //             hoverColor = `rgb(112,88,72)`\n    //             break;\n\n    //         case 'electric':\n    //             hoverColor = `rgb(254,211,39)`\n    //             break;\n\n    //         case 'ghost':\n    //             hoverColor = `rgb(110,85,155)`\n    //             break;\n\n    //         case 'bug':\n    //             hoverColor = `rgb(168,184,32)`\n    //             break;\n\n    //         case 'water':\n    //             hoverColor = `rgb(106,145,237)`\n    //             break;\n\n    //         case 'fairy':\n    //             hoverColor = `rgb(222,165,222)`\n    //             break;\n\n    //         case 'normal':\n    //             hoverColor = `rgb(162,162,110)`\n    //             break;\n\n    //         case 'ground':\n    //             hoverColor = `rgb(231,197,103)`\n    //             break;\n\n    //         default:\n    //             console.log('Don;t have color for type: ' + pokemon.types.split(', ')[0] + '.');\n    //     }\n    // }\n\n    // <img src={`https://assets.pokemon.com/assets/cms2/img/pokedex/full/004.png`} alt={`Front of ${pokemon.name}`} />\n\n    return (\n\n        <React.Fragment>\n\n            {pokemon &&\n                <Styled.CardContainer alternate={hoverColor}>\n                    <p>{pokemon.name.toUpperCase()}</p>\n                    \n                    <img src={pokemon.sprite} alt={`Front of ${pokemon.name}`} />\n\n                    <p>{pokemon.types.toUpperCase()}</p>\n                </Styled.CardContainer>\n            }\n\n        </React.Fragment>\n\n    )\n\n}\n\nexport default PokeCard\n","// ? Writing like this allows styled components to be made in an external file and used anywhere imported\nimport styled from 'styled-components'\n\nexport const PokemonCardsContainer = styled.div` \n  width: 85vw;\n  margin: 0 auto;\n  padding:2rem;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-gap: 3rem;\n`;\n","import React from 'react';\nimport PokeCard from '../PokemonCard/PokeCard'\nimport * as Styled from './PokemonListStyles'\n\nconst PokemonList = (props) => {\n\n\n    const pokemonCards = props.pokemonList.map((pokemon) => {\n        return <PokeCard\n            key={pokemon.name}\n            name={pokemon.name}\n\n        />\n    }\n    )\n\n    return (\n        <Styled.PokemonCardsContainer>\n            {pokemonCards}\n        </Styled.PokemonCardsContainer>\n    );\n};\n\nexport default PokemonList;","import styled from 'styled-components'\n\nexport const SearchBar = styled.input` \nwidth: max-content;\npadding: 1rem;\nmargin: 30px 0;\n/* line-height: 30px; */\n-webkit-appearance: none;\nbox-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\nfont-size:2rem;\n\nborder: .7px solid lightgreen;\noutline: none;\n\n`;\n","import React from 'react';\nimport {SearchBar} from './SearchStyles'\n\nconst Search = (props) => {\n\n    return (\n\n        <React.Fragment>\n\n            <SearchBar \n            type=\"search\" \n            placeholder={props.placeholder}\n            onChange={(e) => props.onChange(e)}\n            />\n\n        </React.Fragment>\n\n    );\n\n};\n\nexport default Search;\n","import React, { useState, useEffect } from 'react';\nimport PokemonList from '../components/Pokemon/PokemonList/PokemonList'\nimport Search from '../components/Search/Search';\n\nimport axios from 'axios'\n\nimport './App.css';\n\nfunction App() {\n\n  const [pokemonList, setPokemonList] = useState([])\n  const [searchResult, setsearchResult] = useState('')\n\n  useEffect(() => {\n\n    const fetchedPokemonList = async () => {\n\n      // ? First get List of Pokemon\n      await axios.get('https://pokeapi.co/api/v2/pokemon?offset=0&limit=150')\n        .then((pokemonListResponse) => {\n\n          // console.log(`Response from pokemonAPI *********** : `, pokemonListResponse)\n          // console.log(`Response from pokemonListResponse *********** : `, pokemonListResponse.data.results)\n\n          setPokemonList(pokemonListResponse.data.results);\n\n        })\n        .catch((err) => {\n          console.log(`Error in call`, err)\n        }\n        )\n    }\n\n    fetchedPokemonList()\n\n  }, [])\n\n  const searchBarHandler = (event) => {\n\n    // console.log(`Search bar says ${event.target.value}`)\n    setsearchResult(event.target.value)\n\n  }\n\n  let filterdPokemonList = [...pokemonList];\n\n  if (pokemonList && searchResult.length > 0) {\n\n    let copiedArray = [...pokemonList];\n \n    // ? Filter list to be pokemon names that have searched letters\n    filterdPokemonList = copiedArray.filter(pokemon => {\n\n      return pokemon.name.toLowerCase().includes(searchResult.toLowerCase())\n\n    })\n\n  }\n\n\n  return (\n\n    <div className=\"App\">\n\n      <Search \n      onChange={searchBarHandler} \n      placeholder={'Search Original 150...'}\n      />\n\n      {filterdPokemonList &&\n        <PokemonList pokemonList={filterdPokemonList} />\n      }\n\n\n    </div>\n\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}